import { NextResponse } from 'next/server';
import clientPromise, { checkMongoConnection } from '@/libs/mongo';

// Declaramos expl√≠citamente que este c√≥digo debe ejecutarse en el entorno Node.js
export const runtime = 'nodejs';

// Endpoint de diagn√≥stico para probar la conexi√≥n con MongoDB
export async function GET() {
  console.log("üîÑ Iniciando diagn√≥stico de conexi√≥n a MongoDB...");
  
  try {
    // Verificar conexi√≥n b√°sica
    console.log("üîÑ Verificando conexi√≥n b√°sica...");
    const isConnected = await checkMongoConnection();
    
    if (!isConnected) {
      console.error("‚ùå Fallo en la verificaci√≥n de conexi√≥n b√°sica");
      return NextResponse.json({
        success: false,
        error: "La verificaci√≥n b√°sica de conexi√≥n fall√≥",
        timestamp: new Date().toISOString()
      }, { status: 500 });
    }
    
    console.log("‚úÖ Verificaci√≥n b√°sica exitosa");
    
    // Obtener informaci√≥n del servidor
    console.log("üîÑ Obteniendo informaci√≥n del servidor...");
    const client = await clientPromise;
    const adminDb = client.db("admin");
    
    // Informaci√≥n de construcci√≥n del servidor
    const buildInfo = await adminDb.command({ buildInfo: 1 });
    
    // Verificar la base de datos del proyecto
    console.log("üîÑ Verificando la base de datos sysdiagramai...");
    const db = client.db("sysdiagramai");
    const collections = await db.listCollections().toArray();
    
    // Listar bases de datos disponibles
    console.log("üîÑ Listando bases de datos disponibles...");
    const databasesList = await client.db().admin().listDatabases();
    
    return NextResponse.json({
      success: true,
      connection: {
        status: "connected",
        timestamp: new Date().toISOString()
      },
      serverInfo: {
        version: buildInfo.version,
        gitVersion: buildInfo.gitVersion
      },
      databases: databasesList.databases.map(db => ({
        name: db.name,
        sizeOnDisk: db.sizeOnDisk
      })),
      sysdiagramaiDatabase: {
        collections: collections.map(col => col.name)
      }
    }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Error durante el diagn√≥stico:", error);
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : "Error desconocido",
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 